package fishmodel.plotting;

import org.jfree.chart.renderer.PaintScale;

import java.awt.*;

/**
 * Implements a RedBlueInv color map.
 */
public class RedBlueScale implements PaintScale {

    final static double[][] colormap = new double[][]  {{0, 0.4549, 0.7373}, {0, 0.4632, 0.7431}, {0, 0.4715, 0.7489}, {0, 0.4798, 0.7548}, {0, 0.4881, 0.7606},
            {0, 0.4964, 0.7665}, {0, 0.5047, 0.7723}, {0, 0.5130, 0.7782}, {0, 0.5213, 0.7840}, {0, 0.5296, 0.7899}, {0, 0.5379, 0.7957}, {0, 0.5463, 0.8015},
            {0, 0.5546, 0.8074}, {0, 0.5629, 0.8132}, {0, 0.5712, 0.8191}, {0, 0.5795, 0.8249}, {0, 0.5878, 0.8308}, {0, 0.5961, 0.8366}, {0, 0.6044, 0.8424},
            {0, 0.6127, 0.8483}, {0, 0.6210, 0.8541}, {0, 0.6293, 0.8600}, {0, 0.6376, 0.8658}, {0, 0.6459, 0.8717}, {0, 0.6542, 0.8775}, {0, 0.6625, 0.8834},
            {0.0052, 0.6689, 0.8873}, {0.0157, 0.6734, 0.8893}, {0.0261, 0.6778, 0.8913}, {0.0366, 0.6823, 0.8933}, {0.0471, 0.6867, 0.8953}, {0.0575, 0.6912, 0.8973},
            {0.0680, 0.6957, 0.8993}, {0.0784, 0.7001, 0.9013}, {0.0889, 0.7046, 0.9033}, {0.0993, 0.7090, 0.9053}, {0.1098, 0.7135, 0.9073}, {0.1203, 0.7180, 0.9093},
            {0.1307, 0.7224, 0.9113}, {0.1412, 0.7269, 0.9133}, {0.1516, 0.7313, 0.9153}, {0.1621, 0.7358, 0.9173}, {0.1725, 0.7403, 0.9193}, {0.1830, 0.7447, 0.9213},
            {0.1935, 0.7492, 0.9233}, {0.2039, 0.7536, 0.9253}, {0.2144, 0.7581, 0.9273}, {0.2248, 0.7626, 0.9293}, {0.2353, 0.7670, 0.9313}, {0.2458, 0.7715, 0.9333},
            {0.2562, 0.7759, 0.9353}, {0.2667, 0.7804, 0.9373}, {0.2799, 0.7832, 0.9371}, {0.2931, 0.7859, 0.9369}, {0.3063, 0.7887, 0.9368}, {0.3196, 0.7915, 0.9366},
            {0.3328, 0.7942, 0.9365}, {0.3460, 0.7970, 0.9363}, {0.3592, 0.7998, 0.9362}, {0.3725, 0.8025, 0.9360}, {0.3857, 0.8053, 0.9359}, {0.3989, 0.8081, 0.9357},
            {0.4121, 0.8108, 0.9356}, {0.4254, 0.8136, 0.9354}, {0.4386, 0.8164, 0.9353}, {0.4518, 0.8191, 0.9351}, {0.4651, 0.8219, 0.9349}, {0.4783, 0.8247, 0.9348},
            {0.4915, 0.8275, 0.9346}, {0.5047, 0.8302, 0.9345}, {0.5180, 0.8330, 0.9343}, {0.5312, 0.8358, 0.9342}, {0.5444, 0.8385, 0.9340}, {0.5576, 0.8413, 0.9339},
            {0.5709, 0.8441, 0.9337}, {0.5841, 0.8468, 0.9336}, {0.5973, 0.8496, 0.9334}, {0.6087, 0.8524, 0.9336}, {0.6182, 0.8554, 0.9340}, {0.6278, 0.8583, 0.9345},
            {0.6373, 0.8612, 0.9349}, {0.6468, 0.8641, 0.9354}, {0.6564, 0.8671, 0.9359}, {0.6659, 0.8700, 0.9363}, {0.6754, 0.8729, 0.9368}, {0.6850, 0.8758, 0.9373},
            {0.6945, 0.8787, 0.9377}, {0.7040, 0.8817, 0.9382}, {0.7136, 0.8846, 0.9386}, {0.7231, 0.8875, 0.9391}, {0.7326, 0.8904, 0.9396}, {0.7422, 0.8933, 0.9400},
            {0.7517, 0.8963, 0.9405}, {0.7612, 0.8992, 0.9409}, {0.7708, 0.9021, 0.9414}, {0.7803, 0.9050, 0.9419}, {0.7899, 0.9080, 0.9423}, {0.7994, 0.9109, 0.9428},
            {0.8089, 0.9138, 0.9433}, {0.8185, 0.9167, 0.9437}, {0.8280, 0.9196, 0.9442}, {0.8375, 0.9226, 0.9446}, {0.8471, 0.9255, 0.9451}, {0.8511, 0.9258, 0.9383},
            {0.8551, 0.9261, 0.9316}, {0.8591, 0.9264, 0.9248}, {0.8631, 0.9267, 0.9180}, {0.8671, 0.9270, 0.9113}, {0.8710, 0.9273, 0.9045}, {0.8750, 0.9276, 0.8977},
            {0.8790, 0.9280, 0.8910}, {0.8830, 0.9283, 0.8842}, {0.8870, 0.9286, 0.8774}, {0.8910, 0.9289, 0.8707}, {0.8950, 0.9292, 0.8639}, {0.8990, 0.9295, 0.8571},
            {0.9030, 0.9298, 0.8504}, {0.9070, 0.9301, 0.8436}, {0.9110, 0.9304, 0.8368}, {0.9150, 0.9307, 0.8301}, {0.9190, 0.9310, 0.8233}, {0.9230, 0.9313, 0.8165},
            {0.9270, 0.9316, 0.8098}, {0.9310, 0.9319, 0.8030}, {0.9350, 0.9323, 0.7962}, {0.9390, 0.9326, 0.7895}, {0.9430, 0.9329, 0.7827}, {0.9470, 0.9332, 0.7759},
            {0.9496, 0.9316, 0.7703}, {0.9506, 0.9283, 0.7659}, {0.9517, 0.9249, 0.7614}, {0.9528, 0.9215, 0.7569}, {0.9539, 0.9181, 0.7525}, {0.9549, 0.9147, 0.7480},
            {0.9560, 0.9113, 0.7436}, {0.9571, 0.9080, 0.7391}, {0.9582, 0.9046, 0.7346}, {0.9592, 0.9012, 0.7302}, {0.9603, 0.8978, 0.7257}, {0.9614, 0.8944, 0.7213},
            {0.9625, 0.8910, 0.7168}, {0.9636, 0.8877, 0.7123}, {0.9646, 0.8843, 0.7079}, {0.9657, 0.8809, 0.7034}, {0.9668, 0.8775, 0.6990}, {0.9679, 0.8741, 0.6945},
            {0.9689, 0.8707, 0.6900}, {0.9700, 0.8674, 0.6856}, {0.9711, 0.8640, 0.6811}, {0.9722, 0.8606, 0.6767}, {0.9732, 0.8572, 0.6722}, {0.9743, 0.8538, 0.6677},
            {0.9754, 0.8504, 0.6633}, {0.9765, 0.8471, 0.6588}, {0.9759, 0.8411, 0.6544}, {0.9752, 0.8351, 0.6499}, {0.9746, 0.8291, 0.6454}, {0.9740, 0.8231, 0.6410},
            {0.9734, 0.8171, 0.6365}, {0.9728, 0.8111, 0.6321}, {0.9722, 0.8051, 0.6276}, {0.9715, 0.7991, 0.6231}, {0.9709, 0.7931, 0.6187}, {0.9703, 0.7871, 0.6142},
            {0.9697, 0.7811, 0.6098}, {0.9691, 0.7751, 0.6053}, {0.9685, 0.7691, 0.6008}, {0.9679, 0.7631, 0.5964}, {0.9672, 0.7571, 0.5919}, {0.9666, 0.7511, 0.5875},
            {0.9660, 0.7451, 0.5830}, {0.9654, 0.7391, 0.5785}, {0.9648, 0.7331, 0.5741}, {0.9642, 0.7271, 0.5696}, {0.9636, 0.7211, 0.5652}, {0.9629, 0.7151, 0.5607},
            {0.9623, 0.7091, 0.5562}, {0.9617, 0.7031, 0.5518}, {0.9611, 0.6971, 0.5473}, {0.9603, 0.6907, 0.5438}, {0.9594, 0.6840, 0.5412}, {0.9585, 0.6772, 0.5386},
            {0.9576, 0.6704, 0.5359}, {0.9566, 0.6637, 0.5333}, {0.9557, 0.6569, 0.5307}, {0.9548, 0.6501, 0.5281}, {0.9539, 0.6434, 0.5255}, {0.9529, 0.6366, 0.5229},
            {0.9520, 0.6298, 0.5203}, {0.9511, 0.6231, 0.5176}, {0.9502, 0.6163, 0.5150}, {0.9493, 0.6095, 0.5124}, {0.9483, 0.6028, 0.5098}, {0.9474, 0.5960, 0.5072},
            {0.9465, 0.5892, 0.5046}, {0.9456, 0.5825, 0.5020}, {0.9446, 0.5757, 0.4993}, {0.9437, 0.5689, 0.4967}, {0.9428, 0.5622, 0.4941}, {0.9419, 0.5554, 0.4915},
            {0.9409, 0.5486, 0.4889}, {0.9400, 0.5419, 0.4863}, {0.9391, 0.5351, 0.4837}, {0.9382, 0.5283, 0.4810}, {0.9373, 0.5216, 0.4784}, {0.9337, 0.5137, 0.4732},
            {0.9302, 0.5059, 0.4680}, {0.9266, 0.4980, 0.4627}, {0.9231, 0.4902, 0.4575}, {0.9196, 0.4824, 0.4523}, {0.9160, 0.4745, 0.4471}, {0.9125, 0.4667, 0.4418},
            {0.9090, 0.4588, 0.4366}, {0.9054, 0.4510, 0.4314}, {0.9019, 0.4431, 0.4261}, {0.8983, 0.4353, 0.4209}, {0.8948, 0.4275, 0.4157}, {0.8913, 0.4196, 0.4105},
            {0.8877, 0.4118, 0.4052}, {0.8842, 0.4039, 0.4000}, {0.8807, 0.3961, 0.3948}, {0.8771, 0.3882, 0.3895}, {0.8736, 0.3804, 0.3843}, {0.8700, 0.3725, 0.3791},
            {0.8665, 0.3647, 0.3739}, {0.8630, 0.3569, 0.3686}, {0.8594, 0.3490, 0.3634}, {0.8559, 0.3412, 0.3582}, {0.8524, 0.3333, 0.3529}, {0.8488, 0.3255, 0.3477},
            {0.8439, 0.3193, 0.3438}, {0.8376, 0.3149, 0.3412}, {0.8313, 0.3104, 0.3386}, {0.8250, 0.3060, 0.3359}, {0.8187, 0.3015, 0.3333}, {0.8124, 0.2970, 0.3307},
            {0.8061, 0.2926, 0.3281}, {0.7998, 0.2881, 0.3255}, {0.7935, 0.2837, 0.3229}, {0.7872, 0.2792, 0.3203}, {0.7809, 0.2747, 0.3176}, {0.7745, 0.2703, 0.3150},
            {0.7682, 0.2658, 0.3124}, {0.7619, 0.2614, 0.3098}, {0.7556, 0.2569, 0.3072}, {0.7493, 0.2524, 0.3046}, {0.7430, 0.2480, 0.3020}, {0.7367, 0.2435, 0.2993},
            {0.7304, 0.2391, 0.2967}, {0.7241, 0.2346, 0.2941}, {0.7178, 0.2301, 0.2915}, {0.7115, 0.2257, 0.2889}, {0.7052, 0.2212, 0.2863}, {0.6989, 0.2168, 0.2837},
            {0.6926, 0.2123, 0.2810}, {0.6863, 0.2078, 0.2784}};


    Paint[] paints;
    private double lower;
    private double upper;

    public RedBlueScale(double lower, double upper) {
        this.lower = lower;
        this.upper = upper;
        paints = new Paint[colormap.length];
        for (int i = 0; i < colormap.length; i++) {
            paints[i] = new Color((float)colormap[i][0], (float)colormap[i][1], (float)colormap[i][2], 1.0f);

        }
    }

    @Override
    public double getLowerBound() {
        return 0;
    }

    @Override
    public double getUpperBound() {
        return paints.length;
    }

    @Override
    public Paint getPaint(double v) {
        double scaled = ((double)paints.length)*(v-lower)/(upper-lower);
        int index = Math.min(paints.length - 1, (int) (Math.round(scaled)));
        //System.out.println("v="+v+", scaled="+scaled);
        if (index < 0) index = 0;
        else if (index >= paints.length) index = paints.length-1;
        return paints[index];
    }
}
